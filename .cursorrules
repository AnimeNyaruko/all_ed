# LaTeX Math Editor Project Rules

## Project Patterns

### Editor Component Structure (`app/lambai/(UI)/AnswerArea.tsx`)

1.  Uses Lexical (`@lexical/react`) for the core editor framework.
2.  Manages multiple editor instances (`QuestionEditorInstance`), one per question.
3.  Integrates MathLive (`<math-field>`) as an external component for LaTeX input/editing.
4.  Custom `LatexNode` represents equations within the Lexical state.
5.  `LatexComponent` renders the `LatexNode` using `react-katex`.
6.  `LatexTriggerPlugin` listens for `!!` text input.
7.  `MathShortcutPlugin` listens for `Ctrl+Q` keydown using `registerCommand`.
8.  `LatexPluginContext` facilitates communication (trigger function, active MathLive key) between editor components and the MathLive state.
9.  MathLive state and interaction logic are managed by the `useMathLiveManager` custom hook.
10. `QuestionEditorInstance` disables its `ContentEditable` (`readOnly`) when its associated MathLive input is active.

### Content Management

1.  Lexical state is the source of truth.
2.  `LatexNode` stores LaTeX strings.
3.  `lexicalStateToAnswerBlocks` function converts editor state to a simplified array structure for parent components.
4.  Text nodes and `LatexNode`s coexist within paragraphs.

### Layout (`app/lambai/(UI)/lambai.tsx`, `ui/Style/index.css`)

1.  **Main Layout:** CSS Grid (`display: grid`) with explicit column definitions (`gridTemplateColumns: \`${leftWidth}px 1fr\``) and fixed height (`h-[calc(100vh-64px)]`). Main container has `overflow: hidden`.
2.  **Panel Scrolling:** Child wrappers have `overflow: hidden`, inner content divs use `overflow-y: auto` with height constraints (`h-full` or `absolute inset-0`).
3.  **Left Scrollbar:** Achieved using `direction: rtl` on the scroll container and `direction: ltr` on the inner content.
4.  **Global Scroll Prevention:** `html, body` have `height: 100%; overflow: hidden;`.
5.  **Resizable Layout (Custom Ghost Drag in `lambai.tsx`):**
    - Replaces `react-resizable`.
    - Uses a custom handle `div` and a conditionally rendered ghost `div`.
    - Drag state managed by `isDragging` (state), `ghostLeft` (state), and refs (`dragStartXRef`, `startLeftWidthRef`, `ghostLeftRef`).
    - `useEffect` manages global move/end listeners based on `isDragging`.
    - Layout updates (`gridTemplateColumns`) only on drag end.

### Event Handling / Interaction Flow

1.  **New Equation (`!!` or `Ctrl+Q` Trigger):**
    - `LatexTriggerPlugin` or `MathShortcutPlugin` detects the trigger.
    - Both call `triggerMathfield` (passed via context).
    - `triggerMathfield` (in `useMathLiveManager`) checks `activeMathLiveKey`:
      - If another instance active: `scrollIntoView()` and `.focus()` on the existing `<math-field>`. Return.
      - If no other instance active: Update state (`isLatexInputVisible`, `currentLatexValue`, `editingNodeKey=null`, `activeMathLiveKey=currentKey`) to show MathLive input.
    - `MathShortcutPlugin` handles selection removal before calling `triggerMathfield`.
2.  **Edit Equation (Click - _Needs Verification_):**
    - `LatexComponent` `onClick` handler should call `triggerMathfield`, passing the node key and current LaTeX.
    - `triggerMathfield` populates MathLive (similar to new, but sets `editingNodeKey`).
3.  **Confirm Equation (Enter in MathLive):**
    - `handleMathfieldKeyDown` captures LaTeX, prevents default.
    - Calls `editor.update()`:
      - If editing (`editingNodeKey` exists): find node `$getNodeByKey`, call `node.setLatex(newLatex)` or `node.remove()` if empty.
      - If new (`editingNodeKey` is null): `$createLatexNode`, `selection.insertNodes()`. (`!!` trigger removes text, `Ctrl+Q` removes selection beforehand).
    - Resets MathLive state (`isLatexInputVisible = false`, `activeMathLiveKey = null`).
4.  **Panel Resizing (Custom Ghost Drag):**
    - `mousedown`/`touchstart` on handle -> `handleDragStart` (sets `isDragging=true`, stores start info).
    - `mousemove`/`touchmove` (global listener added via `useEffect`) -> `handleDragMove` (updates `ghostLeft` state/ref).
    - `mouseup`/`touchend` (global listener added via `useEffect`) -> `handleDragEnd` (sets `isDragging=false`, updates `leftWidth` from `ghostLeftRef`).

### Lexical Implementation Notes

1.  **State Updates:** Always use `editor.read()` or `editor.update()`.
2.  **Selection:** Use `$getSelection()`, `$isRangeSelection()`, `$setSelection()`.
3.  **Node Modification:** Use node methods or selection methods within update blocks.
4.  **Custom Nodes:** Extend `DecoratorNode`.
5.  **Plugins:** Use `registerCommand` for key events, `registerUpdateListener` for text changes.
6.  **Context:** Pass shared state/functions (`triggerMathfield`, `activeMathLiveKey`).
7.  **Hooks:** Encapsulate related state and logic (`useMathLiveManager`).

## User Preferences

### Equation Editing

1.  Type `!!` or press `Ctrl+Q` to start entering a new equation.
2.  Only one equation editor (MathLive) can be open at a time.
3.  Clicking an existing equation _should_ make it editable (via MathLive).
4.  Enter key in the MathLive input confirms the equation and closes the input.
5.  The text editor area is disabled while the MathLive input is active.
6.  Visual feedback for the separate MathLive input area is present.

## Known Challenges

1.  **MathLive Initial Display:** Rendering issue due to parent `overflow: hidden` (Top Priority).
2.  **Click-to-Edit:** Needs full verification/implementation.
3.  **DOM Manipulation & State Sync:** Coordinating state between Lexical and the external MathLive input, ensuring correct cursor positioning.

## Development Workflow

1.  Address MathLive initial display issue.
2.  Implement/Verify click-to-edit functionality.
3.  Add visual styling for `LatexNode`.
4.  Thoroughly test all editor interactions and resizing after fixes.

## Maintenance Patterns

1.  **Linting:** Run `pnpm run lint` after each significant change or phase completion to catch errors early.
2.  **Dependency Review:** Periodically check `package.json` against actual imports.

## CSS Techniques

1.  **Left Scrollbar:** Use `direction: rtl` on the scroll container and `direction: ltr` on the direct child content element.

## Interaction Patterns

1.  **Conflict Resolution (Single Active Element):** When an action would create a conflict (e.g., opening a second MathLive input), prevent the action and instead scroll to and focus the existing active element.
2.  **High-Performance Dragging (Ghost Pattern):** For potentially expensive operations triggered by dragging (like resizing complex layouts), only update a lightweight visual indicator ("ghost") during the drag (`mousemove`/`touchmove`). Apply the actual change only when the drag ends (`mouseup`/`touchend`). This involves managing drag state (`isDragging`), using refs to avoid stale closures in handlers, and potentially using `useEffect` to manage global listeners.
3.  **Client-Side LaTeX Parsing:** Khi dữ liệu backend là chuỗi text thuần túy chứa cả văn bản và markup LaTeX (ví dụ: `$..$`) và không thể thay đổi cấu trúc backend, hãy sử dụng hàm tiện ích client-side (ví dụ: `utils/latexParser.ts`) để phân tích chuỗi này thành một cấu trúc (ví dụ: `Array<{ type: 'text' | 'latex', content: string }>`).
4.  **Mixed Content Rendering:** Sử dụng một component React riêng biệt (ví dụ: `app/ketqua/(UI)/MixedContentRenderer.tsx`) để nhận dữ liệu đã phân tích từ bước trên và render các khối text và LaTeX (sử dụng thư viện như `react-katex`) một cách thích hợp.
5.  **Iterative Prompt Refinement:** Đối với các tác vụ liên quan đến việc tạo văn bản có định dạng cụ thể bởi AI, hãy áp dụng quy trình tinh chỉnh lặp đi lặp lại các hướng dẫn trong prompt, kiểm tra kết quả và điều chỉnh prompt cho đến khi đạt được định dạng đầu ra mong muốn (ví dụ: quản lý xuống dòng, bao bọc ký tự đặc biệt).
